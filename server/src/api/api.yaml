---
openapi: 3.0.0
info:
  title: Keep My - Serve
  description: |
    This is the API for a suit of KeepMy apps. For more information, please visit
    [GitHub](https://github.com/itsabusinessnow/keep-my-serve)
  termsOfService: http://swagger.io/terms/
  contact:
    email: itsabusinessnow@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/StaberindeZA/keep-my-serve/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: actor
  description: Any person or character
- name: simpleText
  description: Any simple text with abstract
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /actor:
    get:
      tags:
      - actor
      summary: Finds Actors
      description: Multiple status values can be provided with comma separated strings
      operationId: returnAllActors
      parameters:
      - name: options
        in: query
        description: Options for what actors to return
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: private
            enum:
            - private
            - public
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleText'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleText'
        "400":
          description: Invalid status value
    post:
      tags:
      - actor
      summary: Add a new actor to the organisation
      operationId: addActor
      requestBody:
        $ref: '#/components/requestBodies/Actor'
      responses:
        "405":
          description: Invalid input
  /actor/{actorId}:
    get:
      tags:
      - actor
      summary: Find actor by ID
      description: Returns a single Actor
      operationId: getActorById
      parameters:
      - name: actorId
        in: path
        description: ID of actor to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
        "400":
          description: Invalid ID supplied
        "404":
          description: Actor not found
    put:
      tags:
      - actor
      summary: Update an existing actor
      operationId: updateActor
      parameters:
      - name: actorId
        in: path
        description: ID of actor to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/Actor'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
    delete:
      tags:
      - actor
      summary: Deletes an actor
      operationId: deleteActor
      parameters:
      - name: actorId
        in: path
        description: Actor id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Actor not found
  /actor/{actorId}/uploadAvatar:
    post:
      tags:
      - actor
      summary: uploads an image
      operationId: uploadAvatar
      parameters:
      - name: actorId
        in: path
        description: ID of actor to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /simpleText:
    get:
      tags:
      - simpleText
      summary: Finds SimpleText
      description: Multiple status values can be provided with comma separated strings
      operationId: returnAllSimpleText
      parameters:
      - name: options
        in: query
        description: Options for what actors to return
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: private
            enum:
            - private
            - public
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleText'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleText'
        "400":
          description: Invalid status value
    post:
      tags:
      - simpleText
      summary: Add a new simpleText record to the organisation
      operationId: addSimpleText
      requestBody:
        $ref: '#/components/requestBodies/SimpleText'
      responses:
        "405":
          description: Invalid input
  /simpleText/{simpleTextId}:
    get:
      tags:
      - simpleText
      summary: Find Simple Text by ID
      description: Returns a single Simple Text record
      operationId: getSimpleTextById
      parameters:
      - name: simpleTextId
        in: path
        description: ID of simple text record to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleText'
        "400":
          description: Invalid ID supplied
        "404":
          description: Simple Text not found
    put:
      tags:
      - simpleText
      summary: Update an existing simple text record
      operationId: updateSimpleText
      parameters:
      - name: simpleTextId
        in: path
        description: ID of simple text record to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        $ref: '#/components/requestBodies/SimpleText'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Simple Text record not found
        "405":
          description: Validation exception
    delete:
      tags:
      - simpleText
      summary: Deletes a simple text record
      operationId: deleteSimpleText
      parameters:
      - name: simpleTextId
        in: path
        description: Simple text id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Simple text record not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    Actor:
      required:
      - firstName
      type: object
      properties:
        _id:
          type: integer
          format: int64
        public:
          type: boolean
        birthDate:
          type: string
          format: date-time
        deathDate:
          type: string
          format: date-time
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
          - M
          - F
          - O
          - "N"
          - U
        nationality:
          type: string
        website:
          type: string
    SimpleText:
      required:
      - text
      type: object
      properties:
        _id:
          type: integer
          format: int64
        public:
          type: boolean
        text:
          type: string
        abstract:
          type: string
        authorActor:
          type: integer
          description: Actor ID of who said it?
          format: int64
        recipientActors:
          type: array
          description: Actor IDs of who it was said too.
          items:
            type: integer
            format: int64
        date:
          type: string
          format: date-time
        location:
          type: object
          properties:
            coordiantes:
              type: array
              items:
                type: integer
                format: int64
            address:
              type: string
        sourceUrl:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      required: true
    Actor:
      description: Actor object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Actor'
      required: true
    SimpleText:
      description: SimpleText object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SimpleText'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
